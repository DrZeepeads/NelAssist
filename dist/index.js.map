{"version":3,"file":"index.js","sources":["../src/embedding.ts","../src/completion.ts"],"sourcesContent":["import type { OpenAIApi } from 'openai';\n\ninterface EmbeddingResponse {\n  status: number;\n  error?: string;\n  data?: Record<string, any>;\n}\n\ninterface EmbeddingOptions {\n  openai: OpenAIApi;\n  source: string;\n  debug?: boolean;\n  storagePrefix?: string;\n  model?: string;\n}\n\nconst embeddingStore: Record<string, any> = {};\nconst MIN_WORDS_IN_PARAGRAPH = 5;\n\nexport const embedding = async ({\n  openai,\n  source,\n  debug = false,\n  storagePrefix = 'embeds',\n  model = 'text-embedding-ada-002',\n}: EmbeddingOptions): Promise<EmbeddingResponse> => {\n  if (debug) {\n    console.log('Generating Embedding');\n  }\n\n  const paragraphs: string[] = source\n    .split(/\\n\\s*\\n/)\n    .map((para) => para.trim().replaceAll('\\n', ' ').replace(/\\r/g, ''))\n    .filter(\n      (para) =>\n        para.charAt(para.length - 1) !== '?' &&\n        para.split(/\\s+/).length >= MIN_WORDS_IN_PARAGRAPH,\n    );\n\n  const totalParagraphs: number = paragraphs.length;\n  const startTime: number = Date.now();\n\n  try {\n    if (debug) {\n      console.log('Sent file over to OpenAI');\n    }\n\n    const response = await openai.createEmbedding({\n      input: paragraphs,\n      model,\n    });\n\n    const completionTime: number = Date.now();\n\n    if (response.data.data.length >= totalParagraphs) {\n      for (let i = 0; i < totalParagraphs; i++) {\n        embeddingStore[`${storagePrefix}:${paragraphs[i]}`] = JSON.stringify({\n          embedding: response.data.data[i].embedding,\n          created: startTime,\n        });\n      }\n    }\n\n    if (debug) {\n      console.log('Embedding finished');\n      console.log(\n        `Time taken : ${(completionTime - startTime) / 1000} seconds`,\n      );\n    }\n\n    return {\n      status: 200,\n      data: embeddingStore,\n    };\n  } catch (error: any) {\n    if (debug) {\n      console.error(error);\n    }\n\n    if (error.response) {\n      return {\n        status: error.response.status,\n        error: error.response.data,\n      };\n    } else {\n      return {\n        status: 500,\n        error: `Error generating embedding: ${error.message}`,\n      };\n    }\n  }\n};\n","import type { OpenAIApi } from 'openai';\n\ninterface CompletionResponse {\n  status: number;\n  error?: string;\n  data?: string;\n}\n\ninterface CompletionOptions {\n  openai: OpenAIApi;\n  prompt: string;\n  embed: string;\n  maxTokens?: number;\n  debug?: boolean;\n  storagePrefix?: string;\n  embeddingModel?: string;\n  completionModel?: string;\n}\n\nlet embeddingStore: Record<string, any> = {};\nlet embeddedQuestion: any;\n\nconst createPrompt = (question: string, paragraphs: string[]): string =>\n  `Answer the following question, also use your own knowledge when necessary:\n\nContext:\n${paragraphs.join('\\n\\n')}\n\nQuestion:\n${question}?\n\nAnswer:`;\n\nconst extractParagraphFromKey = (key: string, storagePrefix: string): string =>\n  key.substring(storagePrefix.length);\n\nconst calculateDotProduct = (\n  embedding1: number[],\n  embedding2: number[],\n): number =>\n  embedding1\n    .slice(0, embedding2.length)\n    .reduce(\n      (dotProduct, val, index) => dotProduct + val * embedding2[index],\n      0,\n    );\n\nconst findClosestParagraphs = (\n  questionEmbedding: number[],\n  count: number,\n  storagePrefix: string,\n): string[] => {\n  const scores = Object.keys(embeddingStore).map((key) => ({\n    paragraph: extractParagraphFromKey(key, storagePrefix),\n    score: calculateDotProduct(\n      questionEmbedding,\n      JSON.parse(embeddingStore[key]).embedding,\n    ),\n  }));\n\n  return scores\n    .sort((a, b) => b.score - a.score)\n    .slice(0, count)\n    .map((item) => item.paragraph);\n};\n\nexport const completion = async ({\n  openai,\n  prompt,\n  embed,\n  maxTokens = 100,\n  debug = false,\n  storagePrefix = 'embeds',\n  embeddingModel = 'text-embedding-ada-002',\n  completionModel = 'gpt-3.5-turbo',\n}: CompletionOptions): Promise<CompletionResponse> => {\n  const completeStoragePrefix = `${storagePrefix}:`;\n\n  if (debug) {\n    console.log(`Start completion with prompt : ${prompt}`);\n  }\n\n  const startTime: number = Date.now();\n\n  embeddingStore = JSON.parse(embed);\n\n  try {\n    const embeddedQuestionResponse = await openai.createEmbedding({\n      input: prompt,\n      model: embeddingModel,\n    });\n\n    if (embeddedQuestionResponse.data.data.length) {\n      embeddedQuestion = embeddedQuestionResponse.data.data[0].embedding;\n    } else {\n      return {\n        status: 500,\n        error: `Question not embedded properly`,\n      };\n    }\n\n    const closestParagraphs = findClosestParagraphs(\n      embeddedQuestion,\n      5,\n      completeStoragePrefix,\n    );\n\n    const completionData = await openai.createChatCompletion({\n      model: completionModel,\n      messages: [\n        {\n          role: 'user',\n          content: createPrompt(prompt, closestParagraphs),\n        },\n      ],\n      max_tokens: maxTokens,\n      temperature: 0,\n    });\n\n    const completionTime: number = Date.now();\n\n    const choice = completionData.data.choices?.[0]?.message;\n\n    if (!choice) {\n      return {\n        status: 500,\n        error: `No answer gotten`,\n      };\n    }\n\n    if (debug) {\n      console.log(`Completion finished`);\n      console.log(\n        `Time taken : ${(completionTime - startTime) / 1000} seconds`,\n      );\n    }\n\n    return {\n      status: 200,\n      data: choice.content.trim(),\n    };\n  } catch (error: any) {\n    if (debug) {\n      console.error(error);\n    }\n\n    if (error.response) {\n      return {\n        status: error.response.status,\n        error: error.response.data,\n      };\n    } else {\n      return {\n        status: 500,\n        error: `Error with OpenAI API request: ${error.message}`,\n      };\n    }\n  }\n};\n"],"names":["embeddingStore"],"mappings":"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"}